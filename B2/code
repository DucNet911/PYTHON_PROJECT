import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import re

# ========== C·∫§U H√åNH C·ªê ƒê·ªäNH ==========
np.random.seed(42)  # Seed ng·∫´u nhi√™n
plt.rcParams.update({'font.size': 12})  # C·ªë ƒë·ªãnh font size
HISTOGRAM_BINS = 20  # S·ªë bins c·ªë ƒë·ªãnh cho bi·ªÉu ƒë·ªì
COLOR_PALETTE = {'attack': 'steelblue', 'defense': 'orange'}  # B·∫£ng m√†u c·ªë ƒë·ªãnh

# ========== C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ==========
TOP_N = 3
TOP_PLAYERS_FILE = 'top_3.txt'
RESULTS_FILE = 'results2.csv'  # File ƒë·ªÉ l∆∞u to√†n b·ªô d·ªØ li·ªáu c·∫ßu th·ªß v√† ƒë·ªôi
HISTOGRAM_DIR = 'histograms'
ENCODING = 'utf-8-sig'
CSV_FILE = 'results.csv'  # File d·ªØ li·ªáu g·ªëc

# ========== CH·ªà S·ªê PH√ÇN T√çCH ==========
attacking_cols = ['Standard SoT/90', 'Standard G/Sh', 'Standard Dist']
defensive_cols = ['Tackles Tkl', 'Tackles TklW', 'Blocks']


def load_data():
    """ƒê·ªçc v√† chu·∫©n h√≥a d·ªØ li·ªáu v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    try:
        df = pd.read_csv(CSV_FILE, encoding=ENCODING)
        print(f"‚úÖ ƒê·ªçc file '{CSV_FILE}' th√†nh c√¥ng")

        # Chu·∫©n h√≥a d·ªØ li·ªáu s·ªë
        for col in df.columns:
            if col not in ['Player', 'Nation', 'Squad', 'Pos', 'Age']:
                if df[col].dtype == 'object' and df[col].str.contains('%', na=False).any():
                    df[col] = df[col].str.replace('%', '', regex=False)
                df[col] = pd.to_numeric(df[col], errors='coerce')
        return df

    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{CSV_FILE}'. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        exit()
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
        exit()


def save_top_players(df, numeric_columns):
    """L∆∞u top players v·ªõi s·∫Øp x·∫øp ·ªïn ƒë·ªãnh"""
    try:
        with open(TOP_PLAYERS_FILE, 'w', encoding=ENCODING) as f:
            for col in numeric_columns:
                sorted_df = df[['Player', col]].dropna().sort_values(
                    by=[col, 'Player'],
                    ascending=[False, True]
                )
                f.write(f"üìä Th·ªëng k√™: {col}\n")
                f.write("=" * 50 + "\n")
                top_3 = sorted_df.head(TOP_N)
                f.write("üèÜ Top 3:\n")
                f.write(top_3.to_string(index=False, header=False) + "\n\n")
                bottom_3 = df[['Player', col]].dropna().sort_values(
                    by=[col, 'Player'],
                    ascending=[True, True]
                ).head(TOP_N).iloc[::-1]
                f.write("üîª Bottom 3:\n")
                f.write(bottom_3.to_string(index=False, header=False) + "\n")
                f.write("-" * 50 + "\n\n")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u top players: {str(e)}")


def generate_plots(df, numeric_columns, prefix='all'):
    """T·∫°o bi·ªÉu ƒë·ªì v·ªõi style c·ªë ƒë·ªãnh"""
    try:
        out_dir = os.path.join(HISTOGRAM_DIR, prefix)
        os.makedirs(out_dir, exist_ok=True)
        for col in numeric_columns:
            safe_col = re.sub(r'[^\w]', '_', col)
            plt.figure(figsize=(10, 6), dpi=100)
            color = COLOR_PALETTE['attack'] if col in attacking_cols else COLOR_PALETTE['defense']
            plt.hist(df[col].dropna(), bins=HISTOGRAM_BINS, color=color, edgecolor='black')
            plt.title(f"Ph√¢n b·ªë {col} ({prefix})")
            plt.xlabel(col)
            plt.ylabel("S·ªë l∆∞·ª£ng")
            plt.tight_layout()
            plt.savefig(os.path.join(out_dir, f"{safe_col}_{prefix}.png"))
            plt.close()
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")



def main():
    # ========== X·ª¨ L√ù D·ªÆ LI·ªÜU ==========
    df = load_data()

    required_cols = ['Player', 'Squad'] + attacking_cols + defensive_cols
    for col in required_cols:
        if col not in df.columns:
            print(f"‚ùå Thi·∫øu c·ªôt quan tr·ªçng: '{col}'. Vui l√≤ng ki·ªÉm tra file CSV.")
            exit()

    numeric_columns = attacking_cols + defensive_cols
    
    # 1. L∆∞u top/bottom players
    save_top_players(df, numeric_columns)
    print(f"‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£ top players v√†o '{TOP_PLAYERS_FILE}'")

    # 2. T·∫°o bi·ªÉu ƒë·ªì ALL PLAYERS (theo c·∫ßu th·ªß)
    generate_plots(df, numeric_columns, prefix='all_players')
    print(f"‚úÖ ƒê√£ t·∫°o bi·ªÉu ƒë·ªì all_players trong '{os.path.join(HISTOGRAM_DIR, 'all_players')}'")

    for team, grp in df.groupby('Squad'):
        safe_team = re.sub(r'[^\w]', '_', team)
        generate_plots(grp, numeric_columns, prefix=safe_team)
    
    # 3. Ph√¢n t√≠ch ƒë·ªôi v√† l∆∞u v√†o DataFrame
    team_stats = []
    for team, group in df.groupby('Squad'):
        stats = {'Squad': team}
        for col in numeric_columns:
            stats[f'{col}_median'] = group[col].median()
            stats[f'{col}_mean'] = group[col].mean()
            stats[f'{col}_std'] = group[col].std()
        team_stats.append(stats)
    team_df = pd.DataFrame(team_stats)

    # 4. T√≠nh trung b√¨nh across teams => allplayers trung b√¨nh c√°c ƒë·ªôi
    avg_stats = {'Squad': 'allplayers'}
    for col in numeric_columns:
        # L·∫•y c·ªôt mean c·ªßa team_df
        mean_col = f'{col}_mean'
        if mean_col in team_df.columns:
            avg_stats[f'{col}_median'] = team_df[f'{col}_median'].mean()
            avg_stats[f'{col}_mean'] = team_df[f'{col}_mean'].mean()
            avg_stats[f'{col}_std'] = team_df[f'{col}_std'].mean()
    # Append row
    team_df = pd.concat([team_df, pd.DataFrame([avg_stats])], ignore_index=True)

    # 5. L∆∞u team_df (bao g·ªìm allplayers) v√†o CSV
    team_df.to_csv(RESULTS_FILE, index=False, encoding=ENCODING)
    print(f"‚úÖ ƒê√£ l∆∞u th·ªëng k√™ ƒë·ªôi (k√®m allplayers) v√†o '{RESULTS_FILE}'")

    


if __name__ == "__main__":
    main()
