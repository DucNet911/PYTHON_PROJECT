from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import pandas as pd
from io import StringIO
import uuid

# Configuration
TABLE_LINKS = {
    'Standard Stats': ('https://fbref.com/en/comps/9/stats/Premier-League-Stats', 'stats_standard'),
    'Shooting': ('https://fbref.com/en/comps/9/shooting/Premier-League-Stats', 'stats_shooting'),
    'Passing': ('https://fbref.com/en/comps/9/passing/Premier-League-Stats', 'stats_passing'),
    'Goal and Shot Creation': ('https://fbref.com/en/comps/9/gca/Premier-League-Stats', 'stats_gca'),
    'Defense': ('https://fbref.com/en/comps/9/defense/Premier-League-Stats', 'stats_defense'),
    'Possession': ('https://fbref.com/en/comps/9/possession/Premier-League-Stats', 'stats_possession'),
    'Miscellaneous': ('https://fbref.com/en/comps/9/misc/Premier-League-Stats', 'stats_misc'),
    'Goalkeeping': ('https://fbref.com/en/comps/9/keepers/Premier-League-Stats', 'stats_keeper')
}

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
}

REQUIRED_COLUMNS = {
    'Standard Stats': ['Player', 'Nation', 'Squad', 'Pos', 'Age', 'Playing Time Min', 'Playing Time MP', 'Playing Time Starts',
                    'Performance Gls', 'Performance Ast', 'Performance CrdY', 'Performance CrdR',
                    'Expected xG', 'Expected xAG', 'Progression PrgC', 'Progression PrgP', 'Progression PrgR',
                    'Per 90 Minutes Gls', 'Per 90 Minutes Ast', 'Per 90 Minutes xG', 'Per 90 Minutes xAG'],
    'Shooting': ['Player', 'Standard SoT%', 'Standard SoT/90', 'Standard G/Sh', 'Standard Dist'],
    'Passing': ['Player', 'Total Cmp', 'Total Cmp%', 'Total TotDist', 'Short Cmp', 'Medium Cmp', 'Long Cmp',
                'KP', 'Passing 1/3', 'PPA', 'CrsPA', 'PrgP'],
    'Goal and Shot Creation': ['Player', 'SCA', 'SCA SCA90', 'GCA', 'GCA GCA90'],
    'Defense': ['Player', 'Tackles Tkl', 'Tackles TklW', 'Challenges Att', 'Challenges Lost',
                'Blocks', 'Blocks Sh', 'Blocks Pass', 'Int'],
    'Possession': ['Player', 'Touches', 'Touches Def Pen', 'Touches Def 3rd', 'Touches Mid 3rd', 'Touches Att 3rd', 'Touches Att Pen',
                'Take-Ons Att', 'Take-Ons Succ%', 'Take-Ons Tkld%',
                'Carries', 'Carries PrgDist', 'Carries PrgC', 'Carries 1/3', 'Carries CPA', 'Carries Mis', 'Carries Dis',
                'Receiving Rec', 'Receiving PrgR'],
    'Miscellaneous': ['Player', 'Performance Fls', 'Performance Fld', 'Performance Off', 'Performance Crs', 'Performance Recov',
                    'Aerial Duels Won', 'Aerial Duels Lost', 'Aerial Duels Won%'],
    'Goalkeeping': ['Player', 'Performance GA90', 'Performance Save%', 'Performance CS%', 'Penalty Kicks Save%']
}

FINAL_COLUMNS = [
    'Player', 'Nation', 'Squad', 'Pos', 'Age', 'Playing Time Min', 'Playing Time MP', 'Playing Time Starts',
    'Performance Gls', 'Performance Ast', 'Performance CrdY', 'Performance CrdR',
    'Expected xG', 'Expected xAG', 'Progression PrgC', 'Progression PrgP', 'Progression PrgR',
    'Per 90 Minutes Gls', 'Per 90 Minutes Ast', 'Per 90 Minutes xG', 'Per 90 Minutes xAG',
    'Performance GA90', 'Performance Save%', 'Performance CS%', 'Penalty Kicks Save%',
    'Standard SoT%', 'Standard SoT/90', 'Standard G/Sh', 'Standard Dist',
    'Total Cmp', 'Total Cmp%', 'Total TotDist', 'Short Cmp', 'Medium Cmp', 'Long Cmp',
    'KP', 'Passing 1/3', 'PPA', 'CrsPA', 'PrgP',
    'SCA', 'SCA SCA90', 'GCA', 'GCA GCA90',
    'Tackles Tkl', 'Tackles TklW', 'Challenges Att', 'Challenges Lost',
    'Blocks', 'Blocks Sh', 'Blocks Pass', 'Int',
    'Touches', 'Touches Def Pen', 'Touches Def 3rd', 'Touches Mid 3rd', 'Touches Att 3rd', 'Touches Att Pen',
    'Take-Ons Att', 'Take-Ons Succ%', 'Take-Ons Tkld%',
    'Carries', 'Carries PrgDist', 'Carries PrgC', 'Carries 1/3', 'Carries CPA', 'Carries Mis', 'Carries Dis',
    'Receiving Rec', 'Receiving PrgR',
    'Performance Fls', 'Performance Fld', 'Performance Off', 'Performance Crs', 'Performance Recov',
    'Aerial Duels Won', 'Aerial Duels Lost', 'Aerial Duels Won%'
]

def fetch_table(driver, url, table_id, name):
    """Fetch and parse table from the given URL."""
    print(f'\nFetching data: {name}')
    driver.get(url)
    try:
        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, table_id)))
    except Exception as e:
        print(f'Loading table error {name}: {e}')
        return None

    soup = BeautifulSoup(driver.page_source, 'html.parser')
    table = soup.find('table', id=table_id)
    if not table:
        print(f'Unable to find table {name}')
        return None

    df = pd.read_html(StringIO(str(table)))[0]
    return df

def process_columns(df, name):
    """Process MultiIndex and clean column names."""
    if isinstance(df.columns, pd.MultiIndex):
        new_cols = []
        for col in df.columns:
            group = col[0].strip() if col[0].strip() and 'Unnamed' not in col[0] else ''
            subgroup = col[1].strip() if col[1].strip() else col[0].strip()
            col_name = f"{group} {subgroup}" if group and group != subgroup else subgroup
            new_cols.append(col_name.strip())
        df.columns = new_cols
    else:
        df.columns = [col.strip() for col in df.columns]

    print(f"Original columns {name}: {list(df.columns)}")
    return df

def clean_data(df, name):
    """Clean data and select required columns."""
    player_col = next((col for col in df.columns if 'player' in col.lower() and 'rk' not in col.lower()), None)
    if not player_col:
        print(f"ERROR: Can't find column 'Player' in {name}")
        return None

    df = df.loc[df[player_col].notna() & (df[player_col] != player_col)].drop_duplicates(subset=player_col)
    df = df.rename(columns={player_col: 'Player'})
    if name == 'Passing':
        df = df.rename(columns={'1/3': 'Passing 1/3'})

    required_cols = REQUIRED_COLUMNS.get(name, ['Player'])
    selected_cols = [col for col in required_cols if col in df.columns]
    if len(selected_cols) <= 1:
        print(f"Can't find the required columns for {name}, pass!")
        return None

    df = df[selected_cols]
    print(f"Selected columns {name}: {list(df.columns)}")
    return df

def merge_data(merged_df, df, name):
    """Merge data into the main DataFrame."""
    if name == 'Goalkeeping':
        return df
    if merged_df.empty:
        return df
    df = df.drop(columns=[col for col in df.columns if col in merged_df.columns and col != 'Player'])
    return pd.merge(merged_df, df, on='Player', how='outer')

def filter_players(merged_df):
    """Filter players with more than 90 minutes played."""
    min_col = next((col for col in merged_df.columns if 'playing time min' in col.lower()), None)
    if min_col:
        merged_df = merged_df[merged_df[min_col].notna()]
        try:
            merged_df[min_col] = merged_df[min_col].str.replace(',', '', regex=False).astype(float)
            merged_df = merged_df[merged_df[min_col] > 90]
            print(f"Found {len(merged_df)} players who played over 90 minutes")
        except Exception as e:
            print(f"Filtering Error 'Playing Time Min': {e}")
    else:
        print("ERROR: Can't find column 'Playing Time Min'")
    return merged_df

def process_goalkeeping(merged_df, goalkeeping_df):
    """Process goalkeeping data and merge with main DataFrame."""
    if goalkeeping_df.empty or merged_df.empty:
        return merged_df

    goalkeeping_df = goalkeeping_df[goalkeeping_df['Player'].isin(merged_df['Player'])]
    pos_col = next((col for col in merged_df.columns if 'pos' in col.lower()), None)
    if pos_col:
        goalkeeping_df['Pos'] = goalkeeping_df['Player'].map(merged_df.set_index('Player')[pos_col])
        for col in goalkeeping_df.columns:
            if col not in ['Player', 'Pos']:
                goalkeeping_df[col] = goalkeeping_df.apply(
                    lambda row: row[col] if pd.notna(row['Pos']) and 'GK' in row['Pos'] else 'N/A', axis=1
                )
        goalkeeping_df.drop(columns='Pos', inplace=True)
        merged_df = pd.merge(merged_df, goalkeeping_df, on='Player', how='left')
    else:
        print("ERROR: Can't find column 'Pos'")
    return merged_df

def save_output(merged_df):
    """Save the final DataFrame to CSV."""
    output_file = 'results.csv'
    try:
        merged_df.to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f'Extracted file {output_file} successfully')
    except Exception as e:
        output_file = 'results_backup.csv'
        print(f'Error when saving to results.csv: {e}, try saving to {output_file}')
        merged_df.to_csv(output_file, index=False, encoding='utf-8-sig')
        print(f'Extracted file {output_file} successfully')

def main():
    """Main function to scrape and process Premier League stats."""
    merged_df = pd.DataFrame()
    goalkeeping_df = pd.DataFrame()

    with webdriver.Chrome(service=Service(ChromeDriverManager().install())) as driver:
        driver.set_page_load_timeout(30)
        for name, (url, table_id) in TABLE_LINKS.items():
            df = fetch_table(driver, url, table_id, name)
            if df is None:
                continue

            df = process_columns(df, name)
            df = clean_data(df, name)
            if df is None:
                continue

            if name == 'Goalkeeping':
                goalkeeping_df = df.copy()
            else:
                merged_df = merge_data(merged_df, df, name)

    merged_df = filter_players(merged_df)
    merged_df = process_goalkeeping(merged_df, goalkeeping_df)

    must_have = ['Player', 'Nation', 'Squad', 'Pos', 'Age']
    available_columns = [col for col in FINAL_COLUMNS if col in merged_df.columns]
    if not available_columns:
        print("Error: Can't find any in the required columns")
        print(f"Columns available in merged_df: {list(merged_df.columns)}")
        return

    final_columns = must_have + [col for col in available_columns if col not in must_have]
    final_columns = [col for col in final_columns if col in merged_df.columns]
    merged_df = merged_df[final_columns]
    print(f"Final columns: {final_columns}")

    merged_df.fillna('N/A', inplace=True)
    save_output(merged_df)

if __name__ == "__main__":
    main()
